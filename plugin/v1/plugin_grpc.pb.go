// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: plugin/v1/plugin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GDPServiceClient is the client API for GDPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GDPServiceClient interface {
	// PluginConfig returns the plugin config for registration
	PluginConfig(ctx context.Context, in *PluginConfigRequest, opts ...grpc.CallOption) (*PluginConfigResponse, error)
	// OnConfigLoaded is called when the config is loaded from any config provider
	OnConfigLoaded(ctx context.Context, in *OnConfigLoadedRequest, opts ...grpc.CallOption) (*OnConfigLoadedResponse, error)
	OnNewLogger(ctx context.Context, in *OnNewLoggerRequest, opts ...grpc.CallOption) (*OnNewLoggerResponse, error)
	OnNewPool(ctx context.Context, in *OnNewPoolRequest, opts ...grpc.CallOption) (*OnNewPoolResponse, error)
	OnNewProxy(ctx context.Context, in *OnNewProxyRequest, opts ...grpc.CallOption) (*OnNewProxyResponse, error)
	OnNewServer(ctx context.Context, in *OnNewServerRequest, opts ...grpc.CallOption) (*OnNewServerResponse, error)
	OnSignal(ctx context.Context, in *OnSignalRequest, opts ...grpc.CallOption) (*OnSignalResponse, error)
	OnRun(ctx context.Context, in *OnRunRequest, opts ...grpc.CallOption) (*OnRunResponse, error)
	OnBooting(ctx context.Context, in *OnBootingRequest, opts ...grpc.CallOption) (*OnBootingResponse, error)
	OnBooted(ctx context.Context, in *OnBootedRequest, opts ...grpc.CallOption) (*OnBootedResponse, error)
	OnOpening(ctx context.Context, in *OnOpeningRequest, opts ...grpc.CallOption) (*OnOpeningResponse, error)
	OnOpened(ctx context.Context, in *OnOpenedRequest, opts ...grpc.CallOption) (*OnOpenedResponse, error)
	OnClosing(ctx context.Context, in *OnClosingRequest, opts ...grpc.CallOption) (*OnClosingResponse, error)
	OnClosed(ctx context.Context, in *OnClosedRequest, opts ...grpc.CallOption) (*OnClosedResponse, error)
	OnTraffic(ctx context.Context, in *OnTrafficRequest, opts ...grpc.CallOption) (*OnTrafficResponse, error)
	OnIngressTraffic(ctx context.Context, in *OnIngressTrafficRequest, opts ...grpc.CallOption) (*OnIngressTrafficResponse, error)
	OnEgressTraffic(ctx context.Context, in *OnEgressTrafficRequest, opts ...grpc.CallOption) (*OnEgressTrafficResponse, error)
	OnShutdown(ctx context.Context, in *OnShutdownRequest, opts ...grpc.CallOption) (*OnShutdownResponse, error)
	OnTick(ctx context.Context, in *OnTickRequest, opts ...grpc.CallOption) (*OnTickResponse, error)
	OnNewClient(ctx context.Context, in *OnNewClientRequest, opts ...grpc.CallOption) (*OnNewClientResponse, error)
}

type gDPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGDPServiceClient(cc grpc.ClientConnInterface) GDPServiceClient {
	return &gDPServiceClient{cc}
}

func (c *gDPServiceClient) PluginConfig(ctx context.Context, in *PluginConfigRequest, opts ...grpc.CallOption) (*PluginConfigResponse, error) {
	out := new(PluginConfigResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/PluginConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnConfigLoaded(ctx context.Context, in *OnConfigLoadedRequest, opts ...grpc.CallOption) (*OnConfigLoadedResponse, error) {
	out := new(OnConfigLoadedResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnConfigLoaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnNewLogger(ctx context.Context, in *OnNewLoggerRequest, opts ...grpc.CallOption) (*OnNewLoggerResponse, error) {
	out := new(OnNewLoggerResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnNewLogger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnNewPool(ctx context.Context, in *OnNewPoolRequest, opts ...grpc.CallOption) (*OnNewPoolResponse, error) {
	out := new(OnNewPoolResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnNewPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnNewProxy(ctx context.Context, in *OnNewProxyRequest, opts ...grpc.CallOption) (*OnNewProxyResponse, error) {
	out := new(OnNewProxyResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnNewProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnNewServer(ctx context.Context, in *OnNewServerRequest, opts ...grpc.CallOption) (*OnNewServerResponse, error) {
	out := new(OnNewServerResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnNewServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnSignal(ctx context.Context, in *OnSignalRequest, opts ...grpc.CallOption) (*OnSignalResponse, error) {
	out := new(OnSignalResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnRun(ctx context.Context, in *OnRunRequest, opts ...grpc.CallOption) (*OnRunResponse, error) {
	out := new(OnRunResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnBooting(ctx context.Context, in *OnBootingRequest, opts ...grpc.CallOption) (*OnBootingResponse, error) {
	out := new(OnBootingResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnBooting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnBooted(ctx context.Context, in *OnBootedRequest, opts ...grpc.CallOption) (*OnBootedResponse, error) {
	out := new(OnBootedResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnBooted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnOpening(ctx context.Context, in *OnOpeningRequest, opts ...grpc.CallOption) (*OnOpeningResponse, error) {
	out := new(OnOpeningResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnOpening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnOpened(ctx context.Context, in *OnOpenedRequest, opts ...grpc.CallOption) (*OnOpenedResponse, error) {
	out := new(OnOpenedResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnOpened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnClosing(ctx context.Context, in *OnClosingRequest, opts ...grpc.CallOption) (*OnClosingResponse, error) {
	out := new(OnClosingResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnClosing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnClosed(ctx context.Context, in *OnClosedRequest, opts ...grpc.CallOption) (*OnClosedResponse, error) {
	out := new(OnClosedResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnClosed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnTraffic(ctx context.Context, in *OnTrafficRequest, opts ...grpc.CallOption) (*OnTrafficResponse, error) {
	out := new(OnTrafficResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnIngressTraffic(ctx context.Context, in *OnIngressTrafficRequest, opts ...grpc.CallOption) (*OnIngressTrafficResponse, error) {
	out := new(OnIngressTrafficResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnIngressTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnEgressTraffic(ctx context.Context, in *OnEgressTrafficRequest, opts ...grpc.CallOption) (*OnEgressTrafficResponse, error) {
	out := new(OnEgressTrafficResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnEgressTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnShutdown(ctx context.Context, in *OnShutdownRequest, opts ...grpc.CallOption) (*OnShutdownResponse, error) {
	out := new(OnShutdownResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnTick(ctx context.Context, in *OnTickRequest, opts ...grpc.CallOption) (*OnTickResponse, error) {
	out := new(OnTickResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPServiceClient) OnNewClient(ctx context.Context, in *OnNewClientRequest, opts ...grpc.CallOption) (*OnNewClientResponse, error) {
	out := new(OnNewClientResponse)
	err := c.cc.Invoke(ctx, "/plugin.v1.GDPService/OnNewClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GDPServiceServer is the server API for GDPService service.
// All implementations must embed UnimplementedGDPServiceServer
// for forward compatibility
type GDPServiceServer interface {
	// PluginConfig returns the plugin config for registration
	PluginConfig(context.Context, *PluginConfigRequest) (*PluginConfigResponse, error)
	// OnConfigLoaded is called when the config is loaded from any config provider
	OnConfigLoaded(context.Context, *OnConfigLoadedRequest) (*OnConfigLoadedResponse, error)
	OnNewLogger(context.Context, *OnNewLoggerRequest) (*OnNewLoggerResponse, error)
	OnNewPool(context.Context, *OnNewPoolRequest) (*OnNewPoolResponse, error)
	OnNewProxy(context.Context, *OnNewProxyRequest) (*OnNewProxyResponse, error)
	OnNewServer(context.Context, *OnNewServerRequest) (*OnNewServerResponse, error)
	OnSignal(context.Context, *OnSignalRequest) (*OnSignalResponse, error)
	OnRun(context.Context, *OnRunRequest) (*OnRunResponse, error)
	OnBooting(context.Context, *OnBootingRequest) (*OnBootingResponse, error)
	OnBooted(context.Context, *OnBootedRequest) (*OnBootedResponse, error)
	OnOpening(context.Context, *OnOpeningRequest) (*OnOpeningResponse, error)
	OnOpened(context.Context, *OnOpenedRequest) (*OnOpenedResponse, error)
	OnClosing(context.Context, *OnClosingRequest) (*OnClosingResponse, error)
	OnClosed(context.Context, *OnClosedRequest) (*OnClosedResponse, error)
	OnTraffic(context.Context, *OnTrafficRequest) (*OnTrafficResponse, error)
	OnIngressTraffic(context.Context, *OnIngressTrafficRequest) (*OnIngressTrafficResponse, error)
	OnEgressTraffic(context.Context, *OnEgressTrafficRequest) (*OnEgressTrafficResponse, error)
	OnShutdown(context.Context, *OnShutdownRequest) (*OnShutdownResponse, error)
	OnTick(context.Context, *OnTickRequest) (*OnTickResponse, error)
	OnNewClient(context.Context, *OnNewClientRequest) (*OnNewClientResponse, error)
	mustEmbedUnimplementedGDPServiceServer()
}

// UnimplementedGDPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGDPServiceServer struct {
}

func (UnimplementedGDPServiceServer) PluginConfig(context.Context, *PluginConfigRequest) (*PluginConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginConfig not implemented")
}
func (UnimplementedGDPServiceServer) OnConfigLoaded(context.Context, *OnConfigLoadedRequest) (*OnConfigLoadedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnConfigLoaded not implemented")
}
func (UnimplementedGDPServiceServer) OnNewLogger(context.Context, *OnNewLoggerRequest) (*OnNewLoggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewLogger not implemented")
}
func (UnimplementedGDPServiceServer) OnNewPool(context.Context, *OnNewPoolRequest) (*OnNewPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewPool not implemented")
}
func (UnimplementedGDPServiceServer) OnNewProxy(context.Context, *OnNewProxyRequest) (*OnNewProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewProxy not implemented")
}
func (UnimplementedGDPServiceServer) OnNewServer(context.Context, *OnNewServerRequest) (*OnNewServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewServer not implemented")
}
func (UnimplementedGDPServiceServer) OnSignal(context.Context, *OnSignalRequest) (*OnSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSignal not implemented")
}
func (UnimplementedGDPServiceServer) OnRun(context.Context, *OnRunRequest) (*OnRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnRun not implemented")
}
func (UnimplementedGDPServiceServer) OnBooting(context.Context, *OnBootingRequest) (*OnBootingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBooting not implemented")
}
func (UnimplementedGDPServiceServer) OnBooted(context.Context, *OnBootedRequest) (*OnBootedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBooted not implemented")
}
func (UnimplementedGDPServiceServer) OnOpening(context.Context, *OnOpeningRequest) (*OnOpeningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnOpening not implemented")
}
func (UnimplementedGDPServiceServer) OnOpened(context.Context, *OnOpenedRequest) (*OnOpenedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnOpened not implemented")
}
func (UnimplementedGDPServiceServer) OnClosing(context.Context, *OnClosingRequest) (*OnClosingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnClosing not implemented")
}
func (UnimplementedGDPServiceServer) OnClosed(context.Context, *OnClosedRequest) (*OnClosedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnClosed not implemented")
}
func (UnimplementedGDPServiceServer) OnTraffic(context.Context, *OnTrafficRequest) (*OnTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTraffic not implemented")
}
func (UnimplementedGDPServiceServer) OnIngressTraffic(context.Context, *OnIngressTrafficRequest) (*OnIngressTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnIngressTraffic not implemented")
}
func (UnimplementedGDPServiceServer) OnEgressTraffic(context.Context, *OnEgressTrafficRequest) (*OnEgressTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEgressTraffic not implemented")
}
func (UnimplementedGDPServiceServer) OnShutdown(context.Context, *OnShutdownRequest) (*OnShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnShutdown not implemented")
}
func (UnimplementedGDPServiceServer) OnTick(context.Context, *OnTickRequest) (*OnTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTick not implemented")
}
func (UnimplementedGDPServiceServer) OnNewClient(context.Context, *OnNewClientRequest) (*OnNewClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNewClient not implemented")
}
func (UnimplementedGDPServiceServer) mustEmbedUnimplementedGDPServiceServer() {}

// UnsafeGDPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GDPServiceServer will
// result in compilation errors.
type UnsafeGDPServiceServer interface {
	mustEmbedUnimplementedGDPServiceServer()
}

func RegisterGDPServiceServer(s grpc.ServiceRegistrar, srv GDPServiceServer) {
	s.RegisterService(&GDPService_ServiceDesc, srv)
}

func _GDPService_PluginConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).PluginConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/PluginConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).PluginConfig(ctx, req.(*PluginConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnConfigLoaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnConfigLoadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnConfigLoaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnConfigLoaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnConfigLoaded(ctx, req.(*OnConfigLoadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnNewLogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewLoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnNewLogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnNewLogger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnNewLogger(ctx, req.(*OnNewLoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnNewPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnNewPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnNewPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnNewPool(ctx, req.(*OnNewPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnNewProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnNewProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnNewProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnNewProxy(ctx, req.(*OnNewProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnNewServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnNewServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnNewServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnNewServer(ctx, req.(*OnNewServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnSignal(ctx, req.(*OnSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnRun(ctx, req.(*OnRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnBooting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnBootingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnBooting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnBooting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnBooting(ctx, req.(*OnBootingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnBooted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnBootedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnBooted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnBooted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnBooted(ctx, req.(*OnBootedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnOpening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnOpeningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnOpening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnOpening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnOpening(ctx, req.(*OnOpeningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnOpened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnOpenedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnOpened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnOpened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnOpened(ctx, req.(*OnOpenedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnClosing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnClosingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnClosing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnClosing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnClosing(ctx, req.(*OnClosingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnClosed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnClosed(ctx, req.(*OnClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnTraffic(ctx, req.(*OnTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnIngressTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnIngressTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnIngressTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnIngressTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnIngressTraffic(ctx, req.(*OnIngressTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnEgressTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnEgressTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnEgressTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnEgressTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnEgressTraffic(ctx, req.(*OnEgressTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnShutdown(ctx, req.(*OnShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnTick(ctx, req.(*OnTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPService_OnNewClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnNewClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPServiceServer).OnNewClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.v1.GDPService/OnNewClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPServiceServer).OnNewClient(ctx, req.(*OnNewClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GDPService_ServiceDesc is the grpc.ServiceDesc for GDPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GDPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.v1.GDPService",
	HandlerType: (*GDPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginConfig",
			Handler:    _GDPService_PluginConfig_Handler,
		},
		{
			MethodName: "OnConfigLoaded",
			Handler:    _GDPService_OnConfigLoaded_Handler,
		},
		{
			MethodName: "OnNewLogger",
			Handler:    _GDPService_OnNewLogger_Handler,
		},
		{
			MethodName: "OnNewPool",
			Handler:    _GDPService_OnNewPool_Handler,
		},
		{
			MethodName: "OnNewProxy",
			Handler:    _GDPService_OnNewProxy_Handler,
		},
		{
			MethodName: "OnNewServer",
			Handler:    _GDPService_OnNewServer_Handler,
		},
		{
			MethodName: "OnSignal",
			Handler:    _GDPService_OnSignal_Handler,
		},
		{
			MethodName: "OnRun",
			Handler:    _GDPService_OnRun_Handler,
		},
		{
			MethodName: "OnBooting",
			Handler:    _GDPService_OnBooting_Handler,
		},
		{
			MethodName: "OnBooted",
			Handler:    _GDPService_OnBooted_Handler,
		},
		{
			MethodName: "OnOpening",
			Handler:    _GDPService_OnOpening_Handler,
		},
		{
			MethodName: "OnOpened",
			Handler:    _GDPService_OnOpened_Handler,
		},
		{
			MethodName: "OnClosing",
			Handler:    _GDPService_OnClosing_Handler,
		},
		{
			MethodName: "OnClosed",
			Handler:    _GDPService_OnClosed_Handler,
		},
		{
			MethodName: "OnTraffic",
			Handler:    _GDPService_OnTraffic_Handler,
		},
		{
			MethodName: "OnIngressTraffic",
			Handler:    _GDPService_OnIngressTraffic_Handler,
		},
		{
			MethodName: "OnEgressTraffic",
			Handler:    _GDPService_OnEgressTraffic_Handler,
		},
		{
			MethodName: "OnShutdown",
			Handler:    _GDPService_OnShutdown_Handler,
		},
		{
			MethodName: "OnTick",
			Handler:    _GDPService_OnTick_Handler,
		},
		{
			MethodName: "OnNewClient",
			Handler:    _GDPService_OnNewClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/v1/plugin.proto",
}
